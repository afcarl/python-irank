#!/usr/bin/env python

import sqlite3
import os
import stat
import sys
import shutil
import optparse
import yaml
import traceback

import irank
from irank.config import config_file, realpath, IrankOptionParser
from irank.db import populate_db

VERBOSE = False
LINK_FN = os.link
DB_ONLY = False

def ensure_no_real_files_exist(location):
	for path, dirs, files in os.walk(location):
		not_links = [os.path.join(path, file) for file in files if not os.path.islink(os.path.join(path, file))]
		if len(not_links) > 0:
			raise RuntimeError("The following files are not symbolic links: %s" % (
				"\n".join(not_links),))

def clear_dir(location):
	assert "irank" in location # hack to make me feel more secure that I won't be deleting my entire music library
	#ensure_no_real_files_exist(location)
	for content in os.listdir(location):
		full_path = os.path.join(location, content)
		try:
			os.remove(full_path)
		except OSError:
			shutil.rmtree(full_path)

def run(input_file, music_root, playlist_root):
	if os.path.isdir(playlist_root):
		if not DB_ONLY:
			clear_dir(playlist_root)
	else:
		os.mkdir(playlist_root)
	playlist_defs = list(yaml.load_all(open(input_file)))[0]
	print "Populating database.."
	db = populate_db(music_root, db_path = os.path.join(playlist_root, "irank.sqlite"))
	if(DB_ONLY):
		return
	print '-' * 80
	print
	create_playlists(playlist_defs, db, playlist_root)

def create_playlists(rules, db, dest_dir):
	for name, condition in rules.items():
		create_playlist(name, condition, db, dest_dir)
	print "created %s playlists" % (len(rules),)

def create_playlist(name, condition, db, dest_dir):
	print "creating playlist: %s" % (name,)
	output_folder = os.path.join(dest_dir, name)
	os.mkdir(output_folder)
	for filepath, in db.execute('select path from songs where %s' % (condition,)):
		try:
			LINK_FN(filepath, os.path.join(output_folder, os.path.basename(filepath)))
		except (UnicodeEncodeError, OSError), e:
			print "Error linking file: %s" % (filepath.decode('ascii','replace'),)
			traceback.print_exc()

def main():
	global VERBOSE, LINK_FN, DB_ONLY
	parser = IrankOptionParser()
	parser.add_option('-c', '--config', help='config file (%default)', default=config_file('playlists'))
	parser.add_option('-s', '--symlink', action='store_true')
	parser.add_option('--db-only', action='store_true', default=False, help='generate db only - no playlists')
	options, args = parser.parse_args()
	VERBOSE = options.verbose
	LINK_FN = os.symlink if options.symlink else os.link
	DB_ONLY = options.db_only

	def usage():
		raise ValueError(parser.format_help())
	if not len(args) == 0: usage()
	if not options.output: usage()
	if not options.input: usage()
	
	run(*map(realpath, [options.config, options.music, options.irank]))

if __name__ == '__main__':
	main()
